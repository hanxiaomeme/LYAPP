package com.zjlanyun.lyapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IR_MODEL_FIELDS".
*/
public class IrModelFieldsDao extends AbstractDao<IrModelFields, Long> {

    public static final String TABLENAME = "IR_MODEL_FIELDS";

    /**
     * Properties of entity IrModelFields.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Model_id = new Property(1, long.class, "model_id", false, "MODEL_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Field_desc = new Property(3, String.class, "field_desc", false, "FIELD_DESC");
        public final static Property Ttype = new Property(4, String.class, "ttype", false, "TTYPE");
        public final static Property Relation = new Property(5, String.class, "relation", false, "RELATION");
        public final static Property Relation_field = new Property(6, String.class, "relation_field", false, "RELATION_FIELD");
        public final static Property Rel_display_field = new Property(7, String.class, "rel_display_field", false, "REL_DISPLAY_FIELD");
        public final static Property Rel_change_field = new Property(8, String.class, "rel_change_field", false, "REL_CHANGE_FIELD");
        public final static Property Change_save_field = new Property(9, String.class, "change_save_field", false, "CHANGE_SAVE_FIELD");
        public final static Property Change_display_field = new Property(10, String.class, "change_display_field", false, "CHANGE_DISPLAY_FIELD");
        public final static Property Depend_field = new Property(11, String.class, "depend_field", false, "DEPEND_FIELD");
        public final static Property Select_cmd = new Property(12, String.class, "select_cmd", false, "SELECT_CMD");
        public final static Property Tcompute = new Property(13, boolean.class, "tcompute", false, "TCOMPUTE");
        public final static Property Compute_cmd = new Property(14, String.class, "compute_cmd", false, "COMPUTE_CMD");
        public final static Property Readonly = new Property(15, boolean.class, "readonly", false, "READONLY");
        public final static Property Required = new Property(16, boolean.class, "required", false, "REQUIRED");
        public final static Property Scan = new Property(17, boolean.class, "scan", false, "SCAN");
        public final static Property Relation_model_id = new Property(18, long.class, "relation_model_id", false, "RELATION_MODEL_ID");
        public final static Property Store = new Property(19, boolean.class, "store", false, "STORE");
        public final static Property Def_value = new Property(20, String.class, "def_value", false, "DEF_VALUE");
        public final static Property Primary_key = new Property(21, boolean.class, "primary_key", false, "PRIMARY_KEY");
        public final static Property Tdomain = new Property(22, String.class, "tdomain", false, "TDOMAIN");
        public final static Property Sequence = new Property(23, long.class, "sequence", false, "SEQUENCE");
        public final static Property Colspan = new Property(24, long.class, "colspan", false, "COLSPAN");
        public final static Property View_type = new Property(25, String.class, "view_type", false, "VIEW_TYPE");
        public final static Property Visiable = new Property(26, boolean.class, "visiable", false, "VISIABLE");
        public final static Property Cache_min = new Property(27, long.class, "cache_min", false, "CACHE_MIN");
        public final static Property Create_uid = new Property(28, long.class, "create_uid", false, "CREATE_UID");
        public final static Property Write_uid = new Property(29, long.class, "write_uid", false, "WRITE_UID");
        public final static Property Create_date = new Property(30, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Write_date = new Property(31, String.class, "write_date", false, "WRITE_DATE");
        public final static Property Location = new Property(32, String.class, "location", false, "LOCATION");
        public final static Property Is_total = new Property(33, boolean.class, "is_total", false, "IS_TOTAL");
        public final static Property Is_show_more_list = new Property(34, boolean.class, "is_show_more_list", false, "IS_SHOW_MORE_LIST");
        public final static Property Show_in_list = new Property(35, boolean.class, "show_in_list", false, "SHOW_IN_LIST");
    }


    public IrModelFieldsDao(DaoConfig config) {
        super(config);
    }
    
    public IrModelFieldsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IR_MODEL_FIELDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MODEL_ID\" INTEGER NOT NULL ," + // 1: model_id
                "\"NAME\" TEXT," + // 2: name
                "\"FIELD_DESC\" TEXT," + // 3: field_desc
                "\"TTYPE\" TEXT," + // 4: ttype
                "\"RELATION\" TEXT," + // 5: relation
                "\"RELATION_FIELD\" TEXT," + // 6: relation_field
                "\"REL_DISPLAY_FIELD\" TEXT," + // 7: rel_display_field
                "\"REL_CHANGE_FIELD\" TEXT," + // 8: rel_change_field
                "\"CHANGE_SAVE_FIELD\" TEXT," + // 9: change_save_field
                "\"CHANGE_DISPLAY_FIELD\" TEXT," + // 10: change_display_field
                "\"DEPEND_FIELD\" TEXT," + // 11: depend_field
                "\"SELECT_CMD\" TEXT," + // 12: select_cmd
                "\"TCOMPUTE\" INTEGER NOT NULL ," + // 13: tcompute
                "\"COMPUTE_CMD\" TEXT," + // 14: compute_cmd
                "\"READONLY\" INTEGER NOT NULL ," + // 15: readonly
                "\"REQUIRED\" INTEGER NOT NULL ," + // 16: required
                "\"SCAN\" INTEGER NOT NULL ," + // 17: scan
                "\"RELATION_MODEL_ID\" INTEGER NOT NULL ," + // 18: relation_model_id
                "\"STORE\" INTEGER NOT NULL ," + // 19: store
                "\"DEF_VALUE\" TEXT," + // 20: def_value
                "\"PRIMARY_KEY\" INTEGER NOT NULL ," + // 21: primary_key
                "\"TDOMAIN\" TEXT," + // 22: tdomain
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 23: sequence
                "\"COLSPAN\" INTEGER NOT NULL ," + // 24: colspan
                "\"VIEW_TYPE\" TEXT," + // 25: view_type
                "\"VISIABLE\" INTEGER NOT NULL ," + // 26: visiable
                "\"CACHE_MIN\" INTEGER NOT NULL ," + // 27: cache_min
                "\"CREATE_UID\" INTEGER NOT NULL ," + // 28: create_uid
                "\"WRITE_UID\" INTEGER NOT NULL ," + // 29: write_uid
                "\"CREATE_DATE\" TEXT," + // 30: create_date
                "\"WRITE_DATE\" TEXT," + // 31: write_date
                "\"LOCATION\" TEXT," + // 32: location
                "\"IS_TOTAL\" INTEGER NOT NULL ," + // 33: is_total
                "\"IS_SHOW_MORE_LIST\" INTEGER NOT NULL ," + // 34: is_show_more_list
                "\"SHOW_IN_LIST\" INTEGER NOT NULL );"); // 35: show_in_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IR_MODEL_FIELDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IrModelFields entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getModel_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String field_desc = entity.getField_desc();
        if (field_desc != null) {
            stmt.bindString(4, field_desc);
        }
 
        String ttype = entity.getTtype();
        if (ttype != null) {
            stmt.bindString(5, ttype);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(6, relation);
        }
 
        String relation_field = entity.getRelation_field();
        if (relation_field != null) {
            stmt.bindString(7, relation_field);
        }
 
        String rel_display_field = entity.getRel_display_field();
        if (rel_display_field != null) {
            stmt.bindString(8, rel_display_field);
        }
 
        String rel_change_field = entity.getRel_change_field();
        if (rel_change_field != null) {
            stmt.bindString(9, rel_change_field);
        }
 
        String change_save_field = entity.getChange_save_field();
        if (change_save_field != null) {
            stmt.bindString(10, change_save_field);
        }
 
        String change_display_field = entity.getChange_display_field();
        if (change_display_field != null) {
            stmt.bindString(11, change_display_field);
        }
 
        String depend_field = entity.getDepend_field();
        if (depend_field != null) {
            stmt.bindString(12, depend_field);
        }
 
        String select_cmd = entity.getSelect_cmd();
        if (select_cmd != null) {
            stmt.bindString(13, select_cmd);
        }
        stmt.bindLong(14, entity.getTcompute() ? 1L: 0L);
 
        String compute_cmd = entity.getCompute_cmd();
        if (compute_cmd != null) {
            stmt.bindString(15, compute_cmd);
        }
        stmt.bindLong(16, entity.getReadonly() ? 1L: 0L);
        stmt.bindLong(17, entity.getRequired() ? 1L: 0L);
        stmt.bindLong(18, entity.getScan() ? 1L: 0L);
        stmt.bindLong(19, entity.getRelation_model_id());
        stmt.bindLong(20, entity.getStore() ? 1L: 0L);
 
        String def_value = entity.getDef_value();
        if (def_value != null) {
            stmt.bindString(21, def_value);
        }
        stmt.bindLong(22, entity.getPrimary_key() ? 1L: 0L);
 
        String tdomain = entity.getTdomain();
        if (tdomain != null) {
            stmt.bindString(23, tdomain);
        }
        stmt.bindLong(24, entity.getSequence());
        stmt.bindLong(25, entity.getColspan());
 
        String view_type = entity.getView_type();
        if (view_type != null) {
            stmt.bindString(26, view_type);
        }
        stmt.bindLong(27, entity.getVisiable() ? 1L: 0L);
        stmt.bindLong(28, entity.getCache_min());
        stmt.bindLong(29, entity.getCreate_uid());
        stmt.bindLong(30, entity.getWrite_uid());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(31, create_date);
        }
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(32, write_date);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(33, location);
        }
        stmt.bindLong(34, entity.getIs_total() ? 1L: 0L);
        stmt.bindLong(35, entity.getIs_show_more_list() ? 1L: 0L);
        stmt.bindLong(36, entity.getShow_in_list() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IrModelFields entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getModel_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String field_desc = entity.getField_desc();
        if (field_desc != null) {
            stmt.bindString(4, field_desc);
        }
 
        String ttype = entity.getTtype();
        if (ttype != null) {
            stmt.bindString(5, ttype);
        }
 
        String relation = entity.getRelation();
        if (relation != null) {
            stmt.bindString(6, relation);
        }
 
        String relation_field = entity.getRelation_field();
        if (relation_field != null) {
            stmt.bindString(7, relation_field);
        }
 
        String rel_display_field = entity.getRel_display_field();
        if (rel_display_field != null) {
            stmt.bindString(8, rel_display_field);
        }
 
        String rel_change_field = entity.getRel_change_field();
        if (rel_change_field != null) {
            stmt.bindString(9, rel_change_field);
        }
 
        String change_save_field = entity.getChange_save_field();
        if (change_save_field != null) {
            stmt.bindString(10, change_save_field);
        }
 
        String change_display_field = entity.getChange_display_field();
        if (change_display_field != null) {
            stmt.bindString(11, change_display_field);
        }
 
        String depend_field = entity.getDepend_field();
        if (depend_field != null) {
            stmt.bindString(12, depend_field);
        }
 
        String select_cmd = entity.getSelect_cmd();
        if (select_cmd != null) {
            stmt.bindString(13, select_cmd);
        }
        stmt.bindLong(14, entity.getTcompute() ? 1L: 0L);
 
        String compute_cmd = entity.getCompute_cmd();
        if (compute_cmd != null) {
            stmt.bindString(15, compute_cmd);
        }
        stmt.bindLong(16, entity.getReadonly() ? 1L: 0L);
        stmt.bindLong(17, entity.getRequired() ? 1L: 0L);
        stmt.bindLong(18, entity.getScan() ? 1L: 0L);
        stmt.bindLong(19, entity.getRelation_model_id());
        stmt.bindLong(20, entity.getStore() ? 1L: 0L);
 
        String def_value = entity.getDef_value();
        if (def_value != null) {
            stmt.bindString(21, def_value);
        }
        stmt.bindLong(22, entity.getPrimary_key() ? 1L: 0L);
 
        String tdomain = entity.getTdomain();
        if (tdomain != null) {
            stmt.bindString(23, tdomain);
        }
        stmt.bindLong(24, entity.getSequence());
        stmt.bindLong(25, entity.getColspan());
 
        String view_type = entity.getView_type();
        if (view_type != null) {
            stmt.bindString(26, view_type);
        }
        stmt.bindLong(27, entity.getVisiable() ? 1L: 0L);
        stmt.bindLong(28, entity.getCache_min());
        stmt.bindLong(29, entity.getCreate_uid());
        stmt.bindLong(30, entity.getWrite_uid());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(31, create_date);
        }
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(32, write_date);
        }
 
        String location = entity.getLocation();
        if (location != null) {
            stmt.bindString(33, location);
        }
        stmt.bindLong(34, entity.getIs_total() ? 1L: 0L);
        stmt.bindLong(35, entity.getIs_show_more_list() ? 1L: 0L);
        stmt.bindLong(36, entity.getShow_in_list() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IrModelFields readEntity(Cursor cursor, int offset) {
        IrModelFields entity = new IrModelFields( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // model_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // field_desc
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // ttype
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // relation
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // relation_field
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // rel_display_field
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // rel_change_field
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // change_save_field
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // change_display_field
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // depend_field
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // select_cmd
            cursor.getShort(offset + 13) != 0, // tcompute
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // compute_cmd
            cursor.getShort(offset + 15) != 0, // readonly
            cursor.getShort(offset + 16) != 0, // required
            cursor.getShort(offset + 17) != 0, // scan
            cursor.getLong(offset + 18), // relation_model_id
            cursor.getShort(offset + 19) != 0, // store
            cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20), // def_value
            cursor.getShort(offset + 21) != 0, // primary_key
            cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22), // tdomain
            cursor.getLong(offset + 23), // sequence
            cursor.getLong(offset + 24), // colspan
            cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25), // view_type
            cursor.getShort(offset + 26) != 0, // visiable
            cursor.getLong(offset + 27), // cache_min
            cursor.getLong(offset + 28), // create_uid
            cursor.getLong(offset + 29), // write_uid
            cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30), // create_date
            cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31), // write_date
            cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32), // location
            cursor.getShort(offset + 33) != 0, // is_total
            cursor.getShort(offset + 34) != 0, // is_show_more_list
            cursor.getShort(offset + 35) != 0 // show_in_list
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IrModelFields entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setModel_id(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setField_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTtype(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setRelation(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setRelation_field(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setRel_display_field(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setRel_change_field(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setChange_save_field(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setChange_display_field(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setDepend_field(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setSelect_cmd(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setTcompute(cursor.getShort(offset + 13) != 0);
        entity.setCompute_cmd(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setReadonly(cursor.getShort(offset + 15) != 0);
        entity.setRequired(cursor.getShort(offset + 16) != 0);
        entity.setScan(cursor.getShort(offset + 17) != 0);
        entity.setRelation_model_id(cursor.getLong(offset + 18));
        entity.setStore(cursor.getShort(offset + 19) != 0);
        entity.setDef_value(cursor.isNull(offset + 20) ? null : cursor.getString(offset + 20));
        entity.setPrimary_key(cursor.getShort(offset + 21) != 0);
        entity.setTdomain(cursor.isNull(offset + 22) ? null : cursor.getString(offset + 22));
        entity.setSequence(cursor.getLong(offset + 23));
        entity.setColspan(cursor.getLong(offset + 24));
        entity.setView_type(cursor.isNull(offset + 25) ? null : cursor.getString(offset + 25));
        entity.setVisiable(cursor.getShort(offset + 26) != 0);
        entity.setCache_min(cursor.getLong(offset + 27));
        entity.setCreate_uid(cursor.getLong(offset + 28));
        entity.setWrite_uid(cursor.getLong(offset + 29));
        entity.setCreate_date(cursor.isNull(offset + 30) ? null : cursor.getString(offset + 30));
        entity.setWrite_date(cursor.isNull(offset + 31) ? null : cursor.getString(offset + 31));
        entity.setLocation(cursor.isNull(offset + 32) ? null : cursor.getString(offset + 32));
        entity.setIs_total(cursor.getShort(offset + 33) != 0);
        entity.setIs_show_more_list(cursor.getShort(offset + 34) != 0);
        entity.setShow_in_list(cursor.getShort(offset + 35) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IrModelFields entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IrModelFields entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IrModelFields entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
