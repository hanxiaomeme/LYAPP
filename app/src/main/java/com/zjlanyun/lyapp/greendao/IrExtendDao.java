package com.zjlanyun.lyapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IR_EXTEND".
*/
public class IrExtendDao extends AbstractDao<IrExtend, Long> {

    public static final String TABLENAME = "IR_EXTEND";

    /**
     * Properties of entity IrExtend.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Act_id = new Property(1, long.class, "act_id", false, "ACT_ID");
        public final static Property Method = new Property(2, String.class, "method", false, "METHOD");
        public final static Property Model_id = new Property(3, long.class, "model_id", false, "MODEL_ID");
        public final static Property Field = new Property(4, String.class, "field", false, "FIELD");
        public final static Property Unique_field = new Property(5, String.class, "unique_field", false, "UNIQUE_FIELD");
        public final static Property Filter_type = new Property(6, String.class, "filter_type", false, "FILTER_TYPE");
        public final static Property Show_list = new Property(7, boolean.class, "show_list", false, "SHOW_LIST");
    }


    public IrExtendDao(DaoConfig config) {
        super(config);
    }
    
    public IrExtendDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IR_EXTEND\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ACT_ID\" INTEGER NOT NULL ," + // 1: act_id
                "\"METHOD\" TEXT," + // 2: method
                "\"MODEL_ID\" INTEGER NOT NULL ," + // 3: model_id
                "\"FIELD\" TEXT," + // 4: field
                "\"UNIQUE_FIELD\" TEXT," + // 5: unique_field
                "\"FILTER_TYPE\" TEXT," + // 6: filter_type
                "\"SHOW_LIST\" INTEGER NOT NULL );"); // 7: show_list
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IR_EXTEND\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IrExtend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getAct_id());
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
        stmt.bindLong(4, entity.getModel_id());
 
        String field = entity.getField();
        if (field != null) {
            stmt.bindString(5, field);
        }
 
        String unique_field = entity.getUnique_field();
        if (unique_field != null) {
            stmt.bindString(6, unique_field);
        }
 
        String filter_type = entity.getFilter_type();
        if (filter_type != null) {
            stmt.bindString(7, filter_type);
        }
        stmt.bindLong(8, entity.getShow_list() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IrExtend entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getAct_id());
 
        String method = entity.getMethod();
        if (method != null) {
            stmt.bindString(3, method);
        }
        stmt.bindLong(4, entity.getModel_id());
 
        String field = entity.getField();
        if (field != null) {
            stmt.bindString(5, field);
        }
 
        String unique_field = entity.getUnique_field();
        if (unique_field != null) {
            stmt.bindString(6, unique_field);
        }
 
        String filter_type = entity.getFilter_type();
        if (filter_type != null) {
            stmt.bindString(7, filter_type);
        }
        stmt.bindLong(8, entity.getShow_list() ? 1L: 0L);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IrExtend readEntity(Cursor cursor, int offset) {
        IrExtend entity = new IrExtend( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // act_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // method
            cursor.getLong(offset + 3), // model_id
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // field
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // unique_field
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // filter_type
            cursor.getShort(offset + 7) != 0 // show_list
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IrExtend entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAct_id(cursor.getLong(offset + 1));
        entity.setMethod(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setModel_id(cursor.getLong(offset + 3));
        entity.setField(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setUnique_field(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setFilter_type(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setShow_list(cursor.getShort(offset + 7) != 0);
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IrExtend entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IrExtend entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IrExtend entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
