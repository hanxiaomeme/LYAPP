package com.zjlanyun.lyapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IR_MODEL_ACCESS".
*/
public class IrModelAccessDao extends AbstractDao<IrModelAccess, Long> {

    public static final String TABLENAME = "IR_MODEL_ACCESS";

    /**
     * Properties of entity IrModelAccess.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Model_id = new Property(1, long.class, "model_id", false, "MODEL_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Perm_read = new Property(3, boolean.class, "perm_read", false, "PERM_READ");
        public final static Property Perm_write = new Property(4, boolean.class, "perm_write", false, "PERM_WRITE");
        public final static Property Perm_create = new Property(5, boolean.class, "perm_create", false, "PERM_CREATE");
        public final static Property Perm_unlink = new Property(6, boolean.class, "perm_unlink", false, "PERM_UNLINK");
        public final static Property Perm_check = new Property(7, boolean.class, "perm_check", false, "PERM_CHECK");
        public final static Property Perm_uncheck = new Property(8, boolean.class, "perm_uncheck", false, "PERM_UNCHECK");
        public final static Property Create_uid = new Property(9, long.class, "create_uid", false, "CREATE_UID");
        public final static Property Write_uid = new Property(10, long.class, "write_uid", false, "WRITE_UID");
        public final static Property Create_date = new Property(11, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Write_date = new Property(12, String.class, "write_date", false, "WRITE_DATE");
        public final static Property Group_id = new Property(13, long.class, "group_id", false, "GROUP_ID");
        public final static Property User_id = new Property(14, long.class, "user_id", false, "USER_ID");
    }


    public IrModelAccessDao(DaoConfig config) {
        super(config);
    }
    
    public IrModelAccessDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IR_MODEL_ACCESS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MODEL_ID\" INTEGER NOT NULL ," + // 1: model_id
                "\"NAME\" TEXT," + // 2: name
                "\"PERM_READ\" INTEGER NOT NULL ," + // 3: perm_read
                "\"PERM_WRITE\" INTEGER NOT NULL ," + // 4: perm_write
                "\"PERM_CREATE\" INTEGER NOT NULL ," + // 5: perm_create
                "\"PERM_UNLINK\" INTEGER NOT NULL ," + // 6: perm_unlink
                "\"PERM_CHECK\" INTEGER NOT NULL ," + // 7: perm_check
                "\"PERM_UNCHECK\" INTEGER NOT NULL ," + // 8: perm_uncheck
                "\"CREATE_UID\" INTEGER NOT NULL ," + // 9: create_uid
                "\"WRITE_UID\" INTEGER NOT NULL ," + // 10: write_uid
                "\"CREATE_DATE\" TEXT," + // 11: create_date
                "\"WRITE_DATE\" TEXT," + // 12: write_date
                "\"GROUP_ID\" INTEGER NOT NULL ," + // 13: group_id
                "\"USER_ID\" INTEGER NOT NULL );"); // 14: user_id
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IR_MODEL_ACCESS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IrModelAccess entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getModel_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getPerm_read() ? 1L: 0L);
        stmt.bindLong(5, entity.getPerm_write() ? 1L: 0L);
        stmt.bindLong(6, entity.getPerm_create() ? 1L: 0L);
        stmt.bindLong(7, entity.getPerm_unlink() ? 1L: 0L);
        stmt.bindLong(8, entity.getPerm_check() ? 1L: 0L);
        stmt.bindLong(9, entity.getPerm_uncheck() ? 1L: 0L);
        stmt.bindLong(10, entity.getCreate_uid());
        stmt.bindLong(11, entity.getWrite_uid());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(12, create_date);
        }
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(13, write_date);
        }
        stmt.bindLong(14, entity.getGroup_id());
        stmt.bindLong(15, entity.getUser_id());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IrModelAccess entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getModel_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
        stmt.bindLong(4, entity.getPerm_read() ? 1L: 0L);
        stmt.bindLong(5, entity.getPerm_write() ? 1L: 0L);
        stmt.bindLong(6, entity.getPerm_create() ? 1L: 0L);
        stmt.bindLong(7, entity.getPerm_unlink() ? 1L: 0L);
        stmt.bindLong(8, entity.getPerm_check() ? 1L: 0L);
        stmt.bindLong(9, entity.getPerm_uncheck() ? 1L: 0L);
        stmt.bindLong(10, entity.getCreate_uid());
        stmt.bindLong(11, entity.getWrite_uid());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(12, create_date);
        }
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(13, write_date);
        }
        stmt.bindLong(14, entity.getGroup_id());
        stmt.bindLong(15, entity.getUser_id());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IrModelAccess readEntity(Cursor cursor, int offset) {
        IrModelAccess entity = new IrModelAccess( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // model_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.getShort(offset + 3) != 0, // perm_read
            cursor.getShort(offset + 4) != 0, // perm_write
            cursor.getShort(offset + 5) != 0, // perm_create
            cursor.getShort(offset + 6) != 0, // perm_unlink
            cursor.getShort(offset + 7) != 0, // perm_check
            cursor.getShort(offset + 8) != 0, // perm_uncheck
            cursor.getLong(offset + 9), // create_uid
            cursor.getLong(offset + 10), // write_uid
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // create_date
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // write_date
            cursor.getLong(offset + 13), // group_id
            cursor.getLong(offset + 14) // user_id
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IrModelAccess entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setModel_id(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setPerm_read(cursor.getShort(offset + 3) != 0);
        entity.setPerm_write(cursor.getShort(offset + 4) != 0);
        entity.setPerm_create(cursor.getShort(offset + 5) != 0);
        entity.setPerm_unlink(cursor.getShort(offset + 6) != 0);
        entity.setPerm_check(cursor.getShort(offset + 7) != 0);
        entity.setPerm_uncheck(cursor.getShort(offset + 8) != 0);
        entity.setCreate_uid(cursor.getLong(offset + 9));
        entity.setWrite_uid(cursor.getLong(offset + 10));
        entity.setCreate_date(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setWrite_date(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setGroup_id(cursor.getLong(offset + 13));
        entity.setUser_id(cursor.getLong(offset + 14));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IrModelAccess entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IrModelAccess entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IrModelAccess entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
