package com.zjlanyun.lyapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IR_ACT_WINDOW".
*/
public class IrActWindowDao extends AbstractDao<IrActWindow, Long> {

    public static final String TABLENAME = "IR_ACT_WINDOW";

    /**
     * Properties of entity IrActWindow.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Model_id = new Property(2, long.class, "model_id", false, "MODEL_ID");
        public final static Property View_mode = new Property(3, String.class, "view_mode", false, "VIEW_MODE");
        public final static Property Target = new Property(4, String.class, "target", false, "TARGET");
        public final static Property Tdomain = new Property(5, String.class, "tdomain", false, "TDOMAIN");
        public final static Property Create_uid = new Property(6, long.class, "create_uid", false, "CREATE_UID");
        public final static Property Write_uid = new Property(7, long.class, "write_uid", false, "WRITE_UID");
        public final static Property Create_date = new Property(8, String.class, "create_date", false, "CREATE_DATE");
        public final static Property Write_date = new Property(9, String.class, "write_date", false, "WRITE_DATE");
    }


    public IrActWindowDao(DaoConfig config) {
        super(config);
    }
    
    public IrActWindowDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IR_ACT_WINDOW\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"NAME\" TEXT," + // 1: name
                "\"MODEL_ID\" INTEGER NOT NULL ," + // 2: model_id
                "\"VIEW_MODE\" TEXT," + // 3: view_mode
                "\"TARGET\" TEXT," + // 4: target
                "\"TDOMAIN\" TEXT," + // 5: tdomain
                "\"CREATE_UID\" INTEGER NOT NULL ," + // 6: create_uid
                "\"WRITE_UID\" INTEGER NOT NULL ," + // 7: write_uid
                "\"CREATE_DATE\" TEXT," + // 8: create_date
                "\"WRITE_DATE\" TEXT);"); // 9: write_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IR_ACT_WINDOW\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IrActWindow entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getModel_id());
 
        String view_mode = entity.getView_mode();
        if (view_mode != null) {
            stmt.bindString(4, view_mode);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(5, target);
        }
 
        String tdomain = entity.getTdomain();
        if (tdomain != null) {
            stmt.bindString(6, tdomain);
        }
        stmt.bindLong(7, entity.getCreate_uid());
        stmt.bindLong(8, entity.getWrite_uid());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(9, create_date);
        }
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(10, write_date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IrActWindow entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
        stmt.bindLong(3, entity.getModel_id());
 
        String view_mode = entity.getView_mode();
        if (view_mode != null) {
            stmt.bindString(4, view_mode);
        }
 
        String target = entity.getTarget();
        if (target != null) {
            stmt.bindString(5, target);
        }
 
        String tdomain = entity.getTdomain();
        if (tdomain != null) {
            stmt.bindString(6, tdomain);
        }
        stmt.bindLong(7, entity.getCreate_uid());
        stmt.bindLong(8, entity.getWrite_uid());
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(9, create_date);
        }
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(10, write_date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IrActWindow readEntity(Cursor cursor, int offset) {
        IrActWindow entity = new IrActWindow( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.getLong(offset + 2), // model_id
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // view_mode
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // target
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // tdomain
            cursor.getLong(offset + 6), // create_uid
            cursor.getLong(offset + 7), // write_uid
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // create_date
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9) // write_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IrActWindow entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setModel_id(cursor.getLong(offset + 2));
        entity.setView_mode(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setTarget(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setTdomain(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setCreate_uid(cursor.getLong(offset + 6));
        entity.setWrite_uid(cursor.getLong(offset + 7));
        entity.setCreate_date(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setWrite_date(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IrActWindow entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IrActWindow entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IrActWindow entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
