package com.zjlanyun.lyapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IR_SEARCH_FIELDS".
*/
public class IrSearchFieldsDao extends AbstractDao<IrSearchFields, Long> {

    public static final String TABLENAME = "IR_SEARCH_FIELDS";

    /**
     * Properties of entity IrSearchFields.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Act_id = new Property(1, long.class, "act_id", false, "ACT_ID");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Field_desc = new Property(3, String.class, "field_desc", false, "FIELD_DESC");
        public final static Property Scan = new Property(4, boolean.class, "scan", false, "SCAN");
        public final static Property Auto_submit = new Property(5, boolean.class, "auto_submit", false, "AUTO_SUBMIT");
        public final static Property Operator = new Property(6, String.class, "operator", false, "OPERATOR");
        public final static Property Sequence = new Property(7, long.class, "sequence", false, "SEQUENCE");
        public final static Property Field_type = new Property(8, String.class, "field_type", false, "FIELD_TYPE");
        public final static Property Field_rel_model_id = new Property(9, String.class, "field_rel_model_id", false, "FIELD_REL_MODEL_ID");
        public final static Property Rel_table_field_name = new Property(10, String.class, "rel_table_field_name", false, "REL_TABLE_FIELD_NAME");
    }


    public IrSearchFieldsDao(DaoConfig config) {
        super(config);
    }
    
    public IrSearchFieldsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IR_SEARCH_FIELDS\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"ACT_ID\" INTEGER NOT NULL ," + // 1: act_id
                "\"NAME\" TEXT," + // 2: name
                "\"FIELD_DESC\" TEXT," + // 3: field_desc
                "\"SCAN\" INTEGER NOT NULL ," + // 4: scan
                "\"AUTO_SUBMIT\" INTEGER NOT NULL ," + // 5: auto_submit
                "\"OPERATOR\" TEXT," + // 6: operator
                "\"SEQUENCE\" INTEGER NOT NULL ," + // 7: sequence
                "\"FIELD_TYPE\" TEXT," + // 8: field_type
                "\"FIELD_REL_MODEL_ID\" TEXT," + // 9: field_rel_model_id
                "\"REL_TABLE_FIELD_NAME\" TEXT);"); // 10: rel_table_field_name
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IR_SEARCH_FIELDS\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IrSearchFields entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getAct_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String field_desc = entity.getField_desc();
        if (field_desc != null) {
            stmt.bindString(4, field_desc);
        }
        stmt.bindLong(5, entity.getScan() ? 1L: 0L);
        stmt.bindLong(6, entity.getAuto_submit() ? 1L: 0L);
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(7, operator);
        }
        stmt.bindLong(8, entity.getSequence());
 
        String field_type = entity.getField_type();
        if (field_type != null) {
            stmt.bindString(9, field_type);
        }
 
        String field_rel_model_id = entity.getField_rel_model_id();
        if (field_rel_model_id != null) {
            stmt.bindString(10, field_rel_model_id);
        }
 
        String rel_table_field_name = entity.getRel_table_field_name();
        if (rel_table_field_name != null) {
            stmt.bindString(11, rel_table_field_name);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IrSearchFields entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
        stmt.bindLong(2, entity.getAct_id());
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String field_desc = entity.getField_desc();
        if (field_desc != null) {
            stmt.bindString(4, field_desc);
        }
        stmt.bindLong(5, entity.getScan() ? 1L: 0L);
        stmt.bindLong(6, entity.getAuto_submit() ? 1L: 0L);
 
        String operator = entity.getOperator();
        if (operator != null) {
            stmt.bindString(7, operator);
        }
        stmt.bindLong(8, entity.getSequence());
 
        String field_type = entity.getField_type();
        if (field_type != null) {
            stmt.bindString(9, field_type);
        }
 
        String field_rel_model_id = entity.getField_rel_model_id();
        if (field_rel_model_id != null) {
            stmt.bindString(10, field_rel_model_id);
        }
 
        String rel_table_field_name = entity.getRel_table_field_name();
        if (rel_table_field_name != null) {
            stmt.bindString(11, rel_table_field_name);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IrSearchFields readEntity(Cursor cursor, int offset) {
        IrSearchFields entity = new IrSearchFields( //
            cursor.getLong(offset + 0), // id
            cursor.getLong(offset + 1), // act_id
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // field_desc
            cursor.getShort(offset + 4) != 0, // scan
            cursor.getShort(offset + 5) != 0, // auto_submit
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // operator
            cursor.getLong(offset + 7), // sequence
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // field_type
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // field_rel_model_id
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10) // rel_table_field_name
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IrSearchFields entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setAct_id(cursor.getLong(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setField_desc(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setScan(cursor.getShort(offset + 4) != 0);
        entity.setAuto_submit(cursor.getShort(offset + 5) != 0);
        entity.setOperator(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setSequence(cursor.getLong(offset + 7));
        entity.setField_type(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setField_rel_model_id(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setRel_table_field_name(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IrSearchFields entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IrSearchFields entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IrSearchFields entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
