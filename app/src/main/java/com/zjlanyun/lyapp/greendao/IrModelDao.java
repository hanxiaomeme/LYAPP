package com.zjlanyun.lyapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "IR_MODEL".
*/
public class IrModelDao extends AbstractDao<IrModel, Long> {

    public static final String TABLENAME = "IR_MODEL";

    /**
     * Properties of entity IrModel.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, long.class, "id", true, "_id");
        public final static Property Model = new Property(1, String.class, "model", false, "MODEL");
        public final static Property Name = new Property(2, String.class, "name", false, "NAME");
        public final static Property Alias = new Property(3, String.class, "alias", false, "ALIAS");
        public final static Property Info = new Property(4, String.class, "info", false, "INFO");
        public final static Property Primary_key = new Property(5, String.class, "primary_key", false, "PRIMARY_KEY");
        public final static Property Torder = new Property(6, String.class, "torder", false, "TORDER");
        public final static Property Check_cmd = new Property(7, String.class, "check_cmd", false, "CHECK_CMD");
        public final static Property Uncheck_cmd = new Property(8, String.class, "uncheck_cmd", false, "UNCHECK_CMD");
        public final static Property Create_cmd = new Property(9, String.class, "create_cmd", false, "CREATE_CMD");
        public final static Property Write_cmd = new Property(10, String.class, "write_cmd", false, "WRITE_CMD");
        public final static Property Unlink_cmd = new Property(11, String.class, "unlink_cmd", false, "UNLINK_CMD");
        public final static Property Create_uid = new Property(12, long.class, "create_uid", false, "CREATE_UID");
        public final static Property Write_uid = new Property(13, long.class, "write_uid", false, "WRITE_UID");
        public final static Property Write_date = new Property(14, String.class, "write_date", false, "WRITE_DATE");
        public final static Property Create_date = new Property(15, String.class, "create_date", false, "CREATE_DATE");
    }


    public IrModelDao(DaoConfig config) {
        super(config);
    }
    
    public IrModelDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"IR_MODEL\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: id
                "\"MODEL\" TEXT," + // 1: model
                "\"NAME\" TEXT," + // 2: name
                "\"ALIAS\" TEXT," + // 3: alias
                "\"INFO\" TEXT," + // 4: info
                "\"PRIMARY_KEY\" TEXT," + // 5: primary_key
                "\"TORDER\" TEXT," + // 6: torder
                "\"CHECK_CMD\" TEXT," + // 7: check_cmd
                "\"UNCHECK_CMD\" TEXT," + // 8: uncheck_cmd
                "\"CREATE_CMD\" TEXT," + // 9: create_cmd
                "\"WRITE_CMD\" TEXT," + // 10: write_cmd
                "\"UNLINK_CMD\" TEXT," + // 11: unlink_cmd
                "\"CREATE_UID\" INTEGER NOT NULL ," + // 12: create_uid
                "\"WRITE_UID\" INTEGER NOT NULL ," + // 13: write_uid
                "\"WRITE_DATE\" TEXT," + // 14: write_date
                "\"CREATE_DATE\" TEXT);"); // 15: create_date
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"IR_MODEL\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, IrModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(2, model);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
 
        String primary_key = entity.getPrimary_key();
        if (primary_key != null) {
            stmt.bindString(6, primary_key);
        }
 
        String torder = entity.getTorder();
        if (torder != null) {
            stmt.bindString(7, torder);
        }
 
        String check_cmd = entity.getCheck_cmd();
        if (check_cmd != null) {
            stmt.bindString(8, check_cmd);
        }
 
        String uncheck_cmd = entity.getUncheck_cmd();
        if (uncheck_cmd != null) {
            stmt.bindString(9, uncheck_cmd);
        }
 
        String create_cmd = entity.getCreate_cmd();
        if (create_cmd != null) {
            stmt.bindString(10, create_cmd);
        }
 
        String write_cmd = entity.getWrite_cmd();
        if (write_cmd != null) {
            stmt.bindString(11, write_cmd);
        }
 
        String unlink_cmd = entity.getUnlink_cmd();
        if (unlink_cmd != null) {
            stmt.bindString(12, unlink_cmd);
        }
        stmt.bindLong(13, entity.getCreate_uid());
        stmt.bindLong(14, entity.getWrite_uid());
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(15, write_date);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(16, create_date);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, IrModel entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getId());
 
        String model = entity.getModel();
        if (model != null) {
            stmt.bindString(2, model);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(3, name);
        }
 
        String alias = entity.getAlias();
        if (alias != null) {
            stmt.bindString(4, alias);
        }
 
        String info = entity.getInfo();
        if (info != null) {
            stmt.bindString(5, info);
        }
 
        String primary_key = entity.getPrimary_key();
        if (primary_key != null) {
            stmt.bindString(6, primary_key);
        }
 
        String torder = entity.getTorder();
        if (torder != null) {
            stmt.bindString(7, torder);
        }
 
        String check_cmd = entity.getCheck_cmd();
        if (check_cmd != null) {
            stmt.bindString(8, check_cmd);
        }
 
        String uncheck_cmd = entity.getUncheck_cmd();
        if (uncheck_cmd != null) {
            stmt.bindString(9, uncheck_cmd);
        }
 
        String create_cmd = entity.getCreate_cmd();
        if (create_cmd != null) {
            stmt.bindString(10, create_cmd);
        }
 
        String write_cmd = entity.getWrite_cmd();
        if (write_cmd != null) {
            stmt.bindString(11, write_cmd);
        }
 
        String unlink_cmd = entity.getUnlink_cmd();
        if (unlink_cmd != null) {
            stmt.bindString(12, unlink_cmd);
        }
        stmt.bindLong(13, entity.getCreate_uid());
        stmt.bindLong(14, entity.getWrite_uid());
 
        String write_date = entity.getWrite_date();
        if (write_date != null) {
            stmt.bindString(15, write_date);
        }
 
        String create_date = entity.getCreate_date();
        if (create_date != null) {
            stmt.bindString(16, create_date);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public IrModel readEntity(Cursor cursor, int offset) {
        IrModel entity = new IrModel( //
            cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // model
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // name
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // alias
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // info
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // primary_key
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // torder
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // check_cmd
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // uncheck_cmd
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // create_cmd
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // write_cmd
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // unlink_cmd
            cursor.getLong(offset + 12), // create_uid
            cursor.getLong(offset + 13), // write_uid
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // write_date
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // create_date
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, IrModel entity, int offset) {
        entity.setId(cursor.getLong(offset + 0));
        entity.setModel(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setName(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setAlias(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setInfo(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPrimary_key(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setTorder(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setCheck_cmd(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setUncheck_cmd(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setCreate_cmd(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setWrite_cmd(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setUnlink_cmd(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setCreate_uid(cursor.getLong(offset + 12));
        entity.setWrite_uid(cursor.getLong(offset + 13));
        entity.setWrite_date(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setCreate_date(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(IrModel entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(IrModel entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(IrModel entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
